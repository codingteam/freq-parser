package ru.org.codingteam.freqparser

import java.io.File
import java.sql.Timestamp

import org.joda.time.{DateTimeZone, DateTime}
import ru.org.codingteam.freqparser.ParseHelpers._

import scala.collection.mutable
import scala.io.Source
import scala.slick.driver.H2Driver.simple._
import scala.slick.jdbc.GetResult
import scala.slick.jdbc.StaticQuery.interpolation
import scala.util.matching.Regex

object Main {

  def recursiveListFiles(root: File, pattern: Regex): Array[File] = {
    val subFiles = root.listFiles
    val matchedSubFiles = subFiles.filter(f => pattern.findFirstIn(f.getName).isDefined)
    matchedSubFiles ++ subFiles.filter(_.isDirectory).flatMap(recursiveListFiles(_, pattern))
  }
  
  def getLogFiles(root: String): Array[String] = {
    recursiveListFiles(new File(root), "\\d{2}\\.html".r)
      .map(_.getAbsolutePath)
      .sortWith(_ < _)
  }

  def convertLogFile(fileName: String, participants: mutable.HashSet[String])(implicit session: Session) = {
    val content = Source.fromFile(fileName, "UTF-8").mkString

    (extractRoomJid(content), extractDate(content)) match {
      case (Some(room), Some(date)) => extractRawMessages(content).foreach {
        rawMessage => constructLogMessage(rawMessage, participants) match {
          case Some(LogMessage(time, sender, messageType, message)) => {
            participants.add(sender)

            val timestamp =
              new Timestamp(date.toDateTime(time, DateTimeZone.forID("Europe/Moscow")).toDateTime(DateTimeZone.UTC).getMillis)

            sqlu"""
              INSERT INTO log (time, room, sender, type, message)
              VALUES ($timestamp, ${room.take(255)},
                      ${sender.take(255)}, ${messageType.toString}, $message)
            """.first
          }
          case None => println(s"[WARNING] Cannot recognize a raw message: $rawMessage")
        }
      }

      case _ => println(s"[WARNING] $fileName was ignored since it doesn't look like a correct log file generated by freq-bot")
    }
  }

  def main(args: Array[String]) = {
    val path = args match {
      case Array(p) => p
      case _ => "."
    }

    val participants = new mutable.HashSet[String]()

    Database.forURL("jdbc:h2:./hell", driver = "org.h2.Driver", user = "sa") withSession {
      implicit session => for (logFile <- getLogFiles(path)) {
        convertLogFile(logFile, participants)
        println(s"[INFO] $logFile has been converted")
      }
    }
  }
}
